{"version":3,"sources":["components/Header.js","components/richtext/loadQuill.js","components/richtext/QuillEditor.js","pages/HomePage.js","pages/Blogs.js","pages/AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","loadQuill","callback","existingScript","document","getElementById","script","createElement","src","id","body","appendChild","onload","QuillEditor","props","state","editor","initializeQuillEditor","bind","this","setState","window","Quill","theme","React","Component","HomePage","Blogs","AboutMe","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAGO,SAASA,IAEZ,OACI,yBAAKC,UAAU,UACX,uBAAGA,UAAU,QAAb,gBACA,wBAAIA,UAAU,YACV,4BACI,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,e,YCCHC,EAjBC,SAACC,GACf,IAAMC,EAAiBC,SAASC,eAAe,eAE/C,IAAKF,EAAgB,CACnB,IAAMG,EAASF,SAASG,cAAc,UACtCD,EAAOE,IAAM,yCACbF,EAAOG,GAAK,cACZL,SAASM,KAAKC,YAAYL,GAE1BA,EAAOM,OAAS,WACVV,GAAUA,KAIdC,GAAkBD,GAAUA,KCZvBW,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,OAAQ,MAEZ,EAAKC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBANd,EADvB,gEAWQjB,EAAUkB,KAAKF,yBAXvB,8CAeQE,KAAKC,SAAS,CACVJ,OAAQ,IAAIK,OAAOC,MAAM,UAAW,CAChCC,MAAO,aAjBvB,+BAuBQ,OACI,yBAAKd,GAAG,UACJ,2CACA,2CAAgB,wCAAhB,cA1BhB,GAAiCe,IAAMC,WCC1BC,EAAb,uKAEQ,OACI,sEAHZ,GAA8BF,IAAMC,WCDvBE,EAAb,uKAGQ,OACI,4DAJZ,GAA2BH,IAAMC,WCDpBG,EAAb,uKAGQ,OACI,8DAJZ,GAA6BJ,IAAMC,W,eC0BpBI,MArBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC/B,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,SAIN,kBAAC,EAAD,QCXcC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASC,eAAe,SDyHpB,kBAAmBkC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a849cbb0.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nexport function Header() {\n\n    return (\n        <div className=\"header\">\n            <p className=\"logo\">My Tech Life</p>\n            <ul className=\"category\">\n                <li>\n                    <Link to=\"/blogs\">Blogs</Link>\n                </li>\n                <li>\n                    <Link to=\"/\">Life</Link>\n                </li>\n                <li>\n                    <Link to=\"/about\">About Me</Link>\n                </li>\n\n            </ul>\n        </div>\n    )\n}\n\n\n","const loadQuill = (callback) => {\n    const existingScript = document.getElementById('quillEditor');\n  \n    if (!existingScript) {\n      const script = document.createElement('script');\n      script.src = 'https://cdn.quilljs.com/1.3.6/quill.js';\n      script.id = 'quillEditor';\n      document.body.appendChild(script);\n  \n      script.onload = () => {\n        if (callback) callback();\n      };\n    }\n  \n    if (existingScript && callback) callback();\n  };\n\n  export default loadQuill;","import React from 'react';\nimport loadQuill from './loadQuill';\nexport class QuillEditor extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editor: null,\n        }\n        this.initializeQuillEditor = this.initializeQuillEditor.bind(this);\n    }\n\n    componentDidMount() {\n        loadQuill(this.initializeQuillEditor);\n    }\n    \n    initializeQuillEditor() {\n        this.setState({\n            editor: new window.Quill('#editor', {\n                theme: 'snow'\n            })\n        })\n    }\n    \n    render() {\n        return (\n            <div id=\"editor\">\n                <p>Hello World!</p>\n                <p>Some initial <strong>bold</strong> text</p>\n            </div>\n        );\n    }   \n}\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport { Header } from '../components';\n\nexport class HomePage extends React.Component {\n    render() {\n        return (\n            <p>Still considering what to show here</p>\n        );\n    }\n}","import React from 'react';\n\nexport class Blogs extends React.Component {\n    \n    render() {\n        return (\n            <p>The current page is empty</p>\n        );\n    }\n}","import React from 'react';\nexport class AboutMe extends React.Component {\n\n    render() {\n        return (\n            <p>The page is currently empty</p>\n        );\n    }\n}","import React from \"react\";\nimport { HomePage, Blogs, AboutMe } from \"./pages\";\nimport { Header, QuillEditor } from \"./components\";\nimport \"./App.scss\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route path=\"/about\">\n            <AboutMe />\n          </Route>\n          <Route path=\"/blogs\">\n            <Blogs />\n          </Route>\n        </Switch>\n      </div>\n      <QuillEditor />\n    </Router>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}